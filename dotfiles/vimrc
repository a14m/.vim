execute pathogen#infect()
syntax on
:filetype plugin indent on

let mapleader = ';' " define map leader

set clipboard=unnamed "fix not copying between clipboard and vim

"not used any more but left if needed in the future
"vmap <leader>y :w !pbcopy<CR><CR>

set backspace=indent,eol,start "fix backspace not deleteing existing text
"set whichwrap+=<,>,h,l

"set numbers column on the left
set number 

"set colorscheme
colorscheme xoria256 

"sets how many lines of history VIM has to remember
"set history=700 

"Save undo's after file closes
set undofile
"where to save undo histories
set undodir=$HOME/.vim/undo
"How many undos
set undolevels=1000
"number of lines to save for undo
set undoreload=10000        

set showcmd "display incomplete commands

"disable the modelines which i don't understand
set modelines=0
set nomodeline

set autoread "Set to auto read when a file is changed from the outside

set wildignore=*.o,*~,*.pyc "Ignore compiled files 

set encoding=utf-8 "set the encoding to utf-8

"set so=7 "Set 7 lines to the curors - when moving vertical..

set wildmenu "Turn on WiLd menu

set laststatus=2 " Always show the status line

"Format the status line
"set statusline=[%n]\ %<%.99f\ %h%w%m%r%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%y%=%-16(\ %l,%c-%v\ %)%P

set ruler "Always show current position

"set cmdheight=1 "The commandbar height

"set hid "Change buffer - without saving

set noignorecase "Case Senetive searching shortend noic

"set ignorecase "Ignore case when searching shortend ic

"set smartcase

set hlsearch "Highlight search things shortend hls or nohls

set incsearch "Make search act like search in modern browsers

"set nolazyredraw "Don't redraw while executing macros 

set magic "Set magic on, for regular expressions

set showmatch "Show matching bracets when text indicator is over them

set lbr

set ai "Auto indent
set si "Smart indet

"indentation
set softtabstop=4
set tabstop=4
set shiftwidth=4
"specific files indentation specs
autocmd Filetype html setlocal ts=2 sts=2 sw=2
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
set expandtab

"set colorcolumn=80 " set a vertical colomn at char 80
 
"let Vim Wrap lines or leave them as long as they get
"set wrap
set nowrap

set vb "set visiual bell

"set shortmess=atI "Abbreviate messages

"set nostartofline "don't jump to first character when paging

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Omni complete functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set omnifunc=csscomplete#CompleteCSS
"set omnifunc=htmlcomplete#CompleteTags
"set omnifunc=phpcomplete#CompletePHP
"set omnifunc=javascriptcomplete#CompleteJS
"set omnifunc=pythoncomplete#Complete

"ruby and rails onmifunc
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
"ruby match do/end
runtime macros/matchit.vim

"Fast saving
nmap <leader>w :w<cr>
"Fast quiting
nmap <leader>q :q<cr>
cmap :Wq :wq
cmap :WQ :wq

"cmap w!! %!sudo tee > /dev/null % "Override System READONLY files using w!!
"map <leader>e :vsp ~/.vimrc<cr> "Fast editing of the .vimrc

"toggle folding
"set foldmethod=indent
nnoremap <space> za
"auto completion via ctrl-space (instead of the nasty ctrl-x ctrl-o)
inoremap <Nul> <C-x><C-o>

"Easier window movement"
"=======================
nmap <silent> <leader>h :wincmd h<CR>
nmap <silent> <leader>j :wincmd j<CR>
nmap <silent> <leader>k :wincmd k<CR>
nmap <silent> <leader>l :wincmd l<CR>
"nmap <silent> <leader>p :wincmd p<CR>
"nmap <silent> <leader>cj :wincmd j<CR>:close<CR>
"nmap <silent> <leader>ck :wincmd k<CR>:close<CR>
"nmap <silent> <leader>ch :wincmd h<CR>:close<CR>
"nmap <silent> <leader>cl :wincmd l<CR>:close<CR>
"noremap <silent> <leader>cc :close<CR>
"noremap <silent> <leader>cw :cclose<CR>
nmap <silent> <leader>ml <C-W>L
nmap <silent> <leader>mk <C-W>K
nmap <silent> <leader>mh <C-W>H
nmap <silent> <leader>mj <C-W>J
"noremap <silent> <leader>o <C-W>o

"move in lines as you see them not as they are wrapped
nmap j gj
nmap k gk
"nmap > gv>
"nmap < gv<

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Remove the Windows ^M - when the encodings gets messed up
"nmap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

"highlight curser line
"=====================
":hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
":nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>
":nnoremap <leader>cc :set cursorline!<CR>
"au WinLeave * set nocursorline nocursorcolumn
"au WinEnter * set cursorline cursorcolumn
"set cursorline cursorcolumn
":nnoremap <leader>HC :set cursorcolumn!<CR>

"==========="
"Plugin maps"
"==========="

"NerdTree"
"=========
"nmap <leader>nt :NERDTreeToggle<cr>
nmap <leader>nt :NERDTree<cr>
"cmap ntf NERDTreeFind<cr>
"nmap <leader>ntq :NERDTreeClose<cr>



"BufExp"
"======
let g:bufExplorerShowRelativePath=1  " Show relative paths.
let g:bufExplorerSortBy='fullpath'   " Sort by full file path name.

"UltiSnips"
"==========
"let g:UltiSnipsUsePythonVersion = 2
let g:UltiSnipsSnippetsDir = "~/.vim/ultisnips"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

"Vim-airline
"===========
let g:airline_theme='powerlineish'
"branch parts
"let g:airline_enable_branch=1
"seperators
"let g:airline_left_sep = '▶'
"let g:airline_right_sep = '◀'
"modes
let g:airline_section_y=""
"let g:airline_section_gutter=""
let g:airline_detect_whitespace=0
set ttimeoutlen=50

"Syntastic plugin
"================
augroup mine
    au BufWinEnter * sign define mysign
    au BufWinEnter * exe "sign place 1337 line=1 name=mysign buffer=" . bufnr('%')
augroup END
let g:syntastic_mode_map={ 'mode': 'active',
                     \ 'active_filetypes': [],
                     \ 'passive_filetypes': ['html','java'] }

"vim-beautify plugin for js-html-css
"================
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr> "for javascript
autocmd BufNewFile,BufRead *.html.erb set filetype=html "for ruby erb template files
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr> "for Html
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr> "for css or scss

"python special configs"
"========
" Use :make to see syntax errors. (:cn and :cp to move around, :dist to see all errors)
"set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
"set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m

" More syntax highlighting.
"let python_highlight_all = 1
